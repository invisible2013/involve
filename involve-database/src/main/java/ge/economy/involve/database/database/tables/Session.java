/**
 * This class is generated by jOOQ
 */
package ge.economy.involve.database.database.tables;


import ge.economy.involve.database.converter.TimestampConverter;
import ge.economy.involve.database.database.Keys;
import ge.economy.involve.database.database.Public;
import ge.economy.involve.database.database.tables.records.SessionRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Session extends TableImpl<SessionRecord> {

	private static final long serialVersionUID = 1251837284;

	/**
	 * The reference instance of <code>public.session</code>
	 */
	public static final Session SESSION = new Session();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SessionRecord> getRecordType() {
		return SessionRecord.class;
	}

	/**
	 * The column <code>public.session.id</code>.
	 */
	public final TableField<SessionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.session.reform_id</code>.
	 */
	public final TableField<SessionRecord, Integer> REFORM_ID = createField("reform_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.session.start_date</code>.
	 */
	public final TableField<SessionRecord, Date> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.session.end_date</code>.
	 */
	public final TableField<SessionRecord, Date> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.session.image_name</code>.
	 */
	public final TableField<SessionRecord, String> IMAGE_NAME = createField("image_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.session.name</code>.
	 */
	public final TableField<SessionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.session.create_date</code>.
	 */
	public final TableField<SessionRecord, Date> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "", new TimestampConverter());

	/**
	 * The column <code>public.session.creator_id</code>.
	 */
	public final TableField<SessionRecord, Integer> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.session.work_percent</code>.
	 */
	public final TableField<SessionRecord, Integer> WORK_PERCENT = createField("work_percent", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.session.note</code>.
	 */
	public final TableField<SessionRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * Create a <code>public.session</code> table reference
	 */
	public Session() {
		this("session", null);
	}

	/**
	 * Create an aliased <code>public.session</code> table reference
	 */
	public Session(String alias) {
		this(alias, SESSION);
	}

	private Session(String alias, Table<SessionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Session(String alias, Table<SessionRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SessionRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SESSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SessionRecord> getPrimaryKey() {
		return Keys.SESSION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SessionRecord>> getKeys() {
		return Arrays.<UniqueKey<SessionRecord>>asList(Keys.SESSION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Session as(String alias) {
		return new Session(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Session rename(String name) {
		return new Session(name, null);
	}
}
