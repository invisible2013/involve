/**
 * This class is generated by jOOQ
 */
package ge.economy.involve.database.database.tables;


import ge.economy.involve.database.database.Public;
import ge.economy.involve.database.converter.TimestampConverter;
import ge.economy.involve.database.database.Keys;
import ge.economy.involve.database.database.tables.records.EventRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Event extends TableImpl<EventRecord> {

	private static final long serialVersionUID = -1963615474;

	/**
	 * The reference instance of <code>public.event</code>
	 */
	public static final Event EVENT = new Event();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<EventRecord> getRecordType() {
		return EventRecord.class;
	}

	/**
	 * The column <code>public.event.id</code>.
	 */
	public final TableField<EventRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.event.name</code>.
	 */
	public final TableField<EventRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.event.start_date</code>.
	 */
	public final TableField<EventRecord, Date> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.event.end_date</code>.
	 */
	public final TableField<EventRecord, Date> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.event.location</code>.
	 */
	public final TableField<EventRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.event.description</code>.
	 */
	public final TableField<EventRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.event.event_type_id</code>.
	 */
	public final TableField<EventRecord, Integer> EVENT_TYPE_ID = createField("event_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.event.sport_type_id</code>.
	 */
	public final TableField<EventRecord, Integer> SPORT_TYPE_ID = createField("sport_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.event</code> table reference
	 */
	public Event() {
		this("event", null);
	}

	/**
	 * Create an aliased <code>public.event</code> table reference
	 */
	public Event(String alias) {
		this(alias, EVENT);
	}

	private Event(String alias, Table<EventRecord> aliased) {
		this(alias, aliased, null);
	}

	private Event(String alias, Table<EventRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<EventRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EVENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<EventRecord> getPrimaryKey() {
		return Keys.EVENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<EventRecord>> getKeys() {
		return Arrays.<UniqueKey<EventRecord>>asList(Keys.EVENT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Event as(String alias) {
		return new Event(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Event rename(String name) {
		return new Event(name, null);
	}
}
