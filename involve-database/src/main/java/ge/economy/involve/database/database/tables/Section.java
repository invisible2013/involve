/**
 * This class is generated by jOOQ
 */
package ge.economy.involve.database.database.tables;


import ge.economy.involve.database.converter.TimestampConverter;
import ge.economy.involve.database.database.Keys;
import ge.economy.involve.database.database.Public;
import ge.economy.involve.database.database.tables.records.SectionRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Section extends TableImpl<SectionRecord> {

	private static final long serialVersionUID = 106936642;

	/**
	 * The reference instance of <code>public.section</code>
	 */
	public static final Section SECTION = new Section();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SectionRecord> getRecordType() {
		return SectionRecord.class;
	}

	/**
	 * The column <code>public.section.id</code>.
	 */
	public final TableField<SectionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.section.name</code>.
	 */
	public final TableField<SectionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.section.region_id</code>.
	 */
	public final TableField<SectionRecord, Integer> REGION_ID = createField("region_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.section.address</code>.
	 */
	public final TableField<SectionRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.section.sport_type</code>.
	 */
	public final TableField<SectionRecord, Integer> SPORT_TYPE = createField("sport_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.section.create_date</code>.
	 */
	public final TableField<SectionRecord, Date> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.section.city_id</code>.
	 */
	public final TableField<SectionRecord, Integer> CITY_ID = createField("city_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.section.purpose_id</code>.
	 */
	public final TableField<SectionRecord, Integer> PURPOSE_ID = createField("purpose_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.section.condition_id</code>.
	 */
	public final TableField<SectionRecord, Integer> CONDITION_ID = createField("condition_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.section.ownership_id</code>.
	 */
	public final TableField<SectionRecord, Integer> OWNERSHIP_ID = createField("ownership_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.section</code> table reference
	 */
	public Section() {
		this("section", null);
	}

	/**
	 * Create an aliased <code>public.section</code> table reference
	 */
	public Section(String alias) {
		this(alias, SECTION);
	}

	private Section(String alias, Table<SectionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Section(String alias, Table<SectionRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SectionRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SECTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SectionRecord> getPrimaryKey() {
		return Keys.SECTION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SectionRecord>> getKeys() {
		return Arrays.<UniqueKey<SectionRecord>>asList(Keys.SECTION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Section as(String alias) {
		return new Section(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Section rename(String name) {
		return new Section(name, null);
	}
}
