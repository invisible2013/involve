/**
 * This class is generated by jOOQ
 */
package ge.economy.involve.database.database.tables;


import ge.economy.involve.database.database.Public;
import ge.economy.involve.database.database.Keys;
import ge.economy.involve.database.database.tables.records.SportTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SportType extends TableImpl<SportTypeRecord> {

	private static final long serialVersionUID = 654765102;

	/**
	 * The reference instance of <code>public.sport_type</code>
	 */
	public static final SportType SPORT_TYPE = new SportType();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SportTypeRecord> getRecordType() {
		return SportTypeRecord.class;
	}

	/**
	 * The column <code>public.sport_type.id</code>.
	 */
	public final TableField<SportTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.sport_type.name</code>.
	 */
	public final TableField<SportTypeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.sport_type.description</code>.
	 */
	public final TableField<SportTypeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.sport_type.file_name</code>.
	 */
	public final TableField<SportTypeRecord, String> FILE_NAME = createField("file_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * Create a <code>public.sport_type</code> table reference
	 */
	public SportType() {
		this("sport_type", null);
	}

	/**
	 * Create an aliased <code>public.sport_type</code> table reference
	 */
	public SportType(String alias) {
		this(alias, SPORT_TYPE);
	}

	private SportType(String alias, Table<SportTypeRecord> aliased) {
		this(alias, aliased, null);
	}

	private SportType(String alias, Table<SportTypeRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SportTypeRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SPORT_TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SportTypeRecord> getPrimaryKey() {
		return Keys.SPORT_TYPE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SportTypeRecord>> getKeys() {
		return Arrays.<UniqueKey<SportTypeRecord>>asList(Keys.SPORT_TYPE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SportType as(String alias) {
		return new SportType(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SportType rename(String name) {
		return new SportType(name, null);
	}
}
