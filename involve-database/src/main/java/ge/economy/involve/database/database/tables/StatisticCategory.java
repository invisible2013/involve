/**
 * This class is generated by jOOQ
 */
package ge.economy.involve.database.database.tables;


import ge.economy.involve.database.database.Public;
import ge.economy.involve.database.database.Keys;
import ge.economy.involve.database.database.tables.records.StatisticCategoryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatisticCategory extends TableImpl<StatisticCategoryRecord> {

	private static final long serialVersionUID = -846448177;

	/**
	 * The reference instance of <code>public.statistic_category</code>
	 */
	public static final StatisticCategory STATISTIC_CATEGORY = new StatisticCategory();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StatisticCategoryRecord> getRecordType() {
		return StatisticCategoryRecord.class;
	}

	/**
	 * The column <code>public.statistic_category.id</code>.
	 */
	public final TableField<StatisticCategoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.statistic_category.name</code>.
	 */
	public final TableField<StatisticCategoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.statistic_category.statistic_type_id</code>.
	 */
	public final TableField<StatisticCategoryRecord, Integer> STATISTIC_TYPE_ID = createField("statistic_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.statistic_category</code> table reference
	 */
	public StatisticCategory() {
		this("statistic_category", null);
	}

	/**
	 * Create an aliased <code>public.statistic_category</code> table reference
	 */
	public StatisticCategory(String alias) {
		this(alias, STATISTIC_CATEGORY);
	}

	private StatisticCategory(String alias, Table<StatisticCategoryRecord> aliased) {
		this(alias, aliased, null);
	}

	private StatisticCategory(String alias, Table<StatisticCategoryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<StatisticCategoryRecord, Integer> getIdentity() {
		return Keys.IDENTITY_STATISTIC_CATEGORY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<StatisticCategoryRecord> getPrimaryKey() {
		return Keys.STATISTIC_CATEGORY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<StatisticCategoryRecord>> getKeys() {
		return Arrays.<UniqueKey<StatisticCategoryRecord>>asList(Keys.STATISTIC_CATEGORY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public StatisticCategory as(String alias) {
		return new StatisticCategory(alias, this);
	}

	/**
	 * Rename this table
	 */
	public StatisticCategory rename(String name) {
		return new StatisticCategory(name, null);
	}
}
