/**
 * This class is generated by jOOQ
 */
package ge.economy.involve.database.database.tables;


import ge.economy.involve.database.converter.TimestampConverter;
import ge.economy.involve.database.database.Keys;
import ge.economy.involve.database.database.Public;
import ge.economy.involve.database.database.tables.records.UsersRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

	private static final long serialVersionUID = -1215788979;

	/**
	 * The reference instance of <code>public.users</code>
	 */
	public static final Users USERS = new Users();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UsersRecord> getRecordType() {
		return UsersRecord.class;
	}

	/**
	 * The column <code>public.users.id</code>.
	 */
	public final TableField<UsersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.users.first_name</code>.
	 */
	public final TableField<UsersRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.last_name</code>.
	 */
	public final TableField<UsersRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.org_name</code>.
	 */
	public final TableField<UsersRecord, String> ORG_NAME = createField("org_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.id_number</code>.
	 */
	public final TableField<UsersRecord, String> ID_NUMBER = createField("id_number", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.phone</code>.
	 */
	public final TableField<UsersRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.email</code>.
	 */
	public final TableField<UsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.gender_id</code>.
	 */
	public final TableField<UsersRecord, Integer> GENDER_ID = createField("gender_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.user_type_id</code>.
	 */
	public final TableField<UsersRecord, Integer> USER_TYPE_ID = createField("user_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.password</code>.
	 */
	public final TableField<UsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.is_approved</code>.
	 */
	public final TableField<UsersRecord, Boolean> IS_APPROVED = createField("is_approved", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>public.users.creator_id</code>.
	 */
	public final TableField<UsersRecord, Integer> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.create_date</code>.
	 */
	public final TableField<UsersRecord, Date> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.users.user_group_id</code>.
	 */
	public final TableField<UsersRecord, Integer> USER_GROUP_ID = createField("user_group_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.status_id</code>.
	 */
	public final TableField<UsersRecord, Integer> STATUS_ID = createField("status_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.age_range_id</code>.
	 */
	public final TableField<UsersRecord, Integer> AGE_RANGE_ID = createField("age_range_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.sphere_id</code>.
	 */
	public final TableField<UsersRecord, Integer> SPHERE_ID = createField("sphere_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.education_level_id</code>.
	 */
	public final TableField<UsersRecord, Integer> EDUCATION_LEVEL_ID = createField("education_level_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.other_sphere_name</code>.
	 */
	public final TableField<UsersRecord, String> OTHER_SPHERE_NAME = createField("other_sphere_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.enterprise_size_id</code>.
	 */
	public final TableField<UsersRecord, Integer> ENTERPRISE_SIZE_ID = createField("enterprise_size_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.economy_activity_status_id</code>.
	 */
	public final TableField<UsersRecord, Integer> ECONOMY_ACTIVITY_STATUS_ID = createField("economy_activity_status_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.profession</code>.
	 */
	public final TableField<UsersRecord, String> PROFESSION = createField("profession", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.users.activity_sphere_id</code>.
	 */
	public final TableField<UsersRecord, Integer> ACTIVITY_SPHERE_ID = createField("activity_sphere_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.users</code> table reference
	 */
	public Users() {
		this("users", null);
	}

	/**
	 * Create an aliased <code>public.users</code> table reference
	 */
	public Users(String alias) {
		this(alias, USERS);
	}

	private Users(String alias, Table<UsersRecord> aliased) {
		this(alias, aliased, null);
	}

	private Users(String alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<UsersRecord, Integer> getIdentity() {
		return Keys.IDENTITY_USERS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UsersRecord> getPrimaryKey() {
		return Keys.USERS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UsersRecord>> getKeys() {
		return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Users as(String alias) {
		return new Users(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Users rename(String name) {
		return new Users(name, null);
	}
}
